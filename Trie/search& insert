void insert(struct TrieNode *root, string key)
{
 TrieNode *temp = root;
 for(int i=0;key[i]!='\0';i++)
    {
        if(temp->children[key[i]-'a']==NULL)
        temp->children[key[i]-'a']=getNode();
        temp=temp->children[key[i]-'a'];
    }
 temp->isLeaf = true;
}

//Function to use TRIE data structure and search the given string.
bool search(struct TrieNode *root, string key) 
{
   TrieNode * temp = root;
    for(int i=0;key[i]!='\0';i++)
    {
        if(temp->children[key[i]-'a']==NULL)
        return false;
        temp=temp->children[key[i]-'a'];
    }
    return temp->isLeaf;
}


//LeetCode

class TrieNode {
public:
    TrieNode() {
        
    }
    TrieNode *children[26] = {NULL};
    bool isNode = false;
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }
    void insert(string word) {
        TrieNode *current = root;
        for (auto c : word) {
            int index = c - 'a';
            if (current->children[index] == NULL) {
                current->children[index] = new TrieNode();
            }
            current = current->children[index];
        }
        current->isNode = 1;
    }
    
    bool search(string &word, bool isPrefix) {
        TrieNode *current = root;
        for (auto c : word) {
            int index = c - 'a';
            if (current->children[index] == NULL)
                return false;
            current = current->children[index];
        }
        return isPrefix || current->isNode; 
    }
    bool search(string word) {
        return search(word, false);
    }
    bool startsWith(string prefix) {
        return search(prefix, true);
    }

private:
    TrieNode* root;
};
