class Solution {
   TreeNode* findMin(TreeNode *root){
    while(root->left!= NULL){
        root = root->left;
    }
    return root;
}
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
       if(root==NULL){
         return NULL;
       } 
        else if(key<root->val){
            root->left = deleteNode(root->left,key);
        }
        else if(key>root->val){
            root->right = deleteNode(root->right,key);
        }
        // 0 Children
        else if(root->left == NULL && root->right == NULL){
            delete root;
            root= NULL;
        }
        // 1 child
        else if(root->left == NULL){
           TreeNode *temp = root;
            root = root->right;
            delete temp;
        }
        else if(root->right == NULL){
        TreeNode *temp = root;
        root = root->left;
        delete temp;
    } 
        else {
            TreeNode *temp = findMin(root->right);
            root->val = temp->val;
            root->right = deleteNode(root->right,temp->val);
        }
        return root;
    }
    
};

